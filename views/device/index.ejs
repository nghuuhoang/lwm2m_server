<!DOCTYPE html>
<html>
<style>
    <meta charset="utf-8"> <meta name="viewport" content="width=device-width, initial-scale=1"> body {
        margin: 0;
    }
    /* Style the header */
    
    .headerEndpoint {
        background-color: #f1f1f1;
        padding: 20px;
        text-align: center;
    }
    button {
	display: inline-block;
    background-color: #2b5797; /* Green */
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    cursor: pointer;
    float: center;
    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
}
button:active {
  background-color: #2d89ef;
  box-shadow: 0 5px #666;
  transform: translateY(4px);
}
button:hover {
    background-color: #2d89ef;
}
    .btn-group .button {
	display: inline-block;
    background-color: #2b5797; /* Green */
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    cursor: pointer;
    float: center;
    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
}

.btn-group .button:active {
  background-color: #2d89ef;
  box-shadow: 0 5px #666;
  transform: translateY(4px);
}
.btn-group .button:hover {
    background-color: #2d89ef;
}
    
    table {
        border-collapse: collapse;
        width: 80%;
        position: relative;
    	left: 80px;
    }
    
    th,
    td {
        text-align: center;
        padding: 8px;
    }
    
    tr:nth-child(even) {
        background-color: #f2f2f2
    }
    
    th {
        background-color: #008ae6;
        color: white;
    }

  .center {
  	text-align: center;
  }
    
</style>






<head>
	<title><%=epname%></title>
</head>

     	<header>
    	<%- include('header.ejs') %>
        <h1 class="headerEndpoint"><%=epname%></h1>
</header>

<body>

    <table id="idDevice">
        <tr>
            <th>Device</th>
            <th>Instances</th>
            <th>
                <button onclick="buttonDeviceInfo()">Read</button>
            </th>
        </tr>
        <tr>
            <td>Manufacturer</td>
            <td>/3/0/0</td>
            <td id="manufacturer"></td>
        </tr>
        <tr>
            <td>Model Number</td>
            <td>/3/0/1</td>
            <td id="modelNumber"></td>
        </tr>
        <tr>
            <td>Serial Number</td>
            <td>/3/0/2</td>
            <td id="serialNumber"></td>
        </tr>
        <tr>
            <td>Firmware Version</td>
            <td>/3/0/3</td>
            <td id="frimwareVersion"></td>
        </tr>
        <tr>
            <td>Device Type</td>
            <td>/3/0/17</td>
            <td id="deviceType"></td>
        </tr>
    </table>
    <table>
        <tr>
            <th>LED GREEN</th>
            <th>Instances</th>
            <th>
                <button onclick="buttonLightControlLedGreen()">Read</button>
            </th>
        </tr>
        <tr>
            <td>onOff</td>
            <td>/3311/0/5850</td>
            <td id="onOffGreen"></td>
        </tr>
        <tr>
            <td>colour</td>
            <td>/3311/0/5706</td>
            <td id="colourGreen"></td>
        </tr>
    </table>
    <table>
        <tr>
            <th>LED RED</th>
            <th>Instances</th>
            <th>
                <button onclick="buttonLightControlLedRed()">Read</button>
            </th>
        </tr>
        <tr>
            <td>onOff</td>
            <td>/3311/1/5850</td>
            <td id="onOffRed"></td>
        </tr>
        <tr>
            <td>colour</td>
            <td>/3311/1/5706</td>
            <td id="colourRed"></td>
        </tr>
    </table>
    <table>
        <tr>
            <th>LED BLUE</th>
            <th>Instances</th>
            <th>
                <button onclick="buttonLightControlLedBlue()">Read</button>
            </th>
        </tr>
        <tr>
            <td>onOff</td>
            <td>/3311/2/5850</td>
            <td id="onOffBlue"></td>
        </tr>
        <tr>
            <td>colour</td>
            <td>/3311/2/5706</td>
            <td id="colourBlue"></td>
        </tr>
    </table>
    <table>
  <tr>
    <th>Led Green</th>
    <th>Led Red</th>
    <th>Led Blue</th>
  </tr>
  <tr>
    <td><div class="btn-group">
        <button class="button" onclick="handleLedGreenOn()">On</button>
        <button class="button" onclick="handleLedGreenOff()">Off</button>
    	</div>
	</td>
    <td><div class="btn-group">
        <button class="button" onclick="handleLedRedOn()">On</button>
        <button class="button" onclick="handleLedRedOff()">Off</button>
    	</div>
	</td>
    <td><div class="btn-group">
        <button class="button" onclick="handleLedBlueOn()">On</button>
        <button class="button" onclick="handleLedBlueOff()">Off</button>
    	</div>
	</td>
  </tr>
</table>
    <h4 class="center">Date: <span id="date"></span></h4>
    <button class="center" onclick="buttonTemp()">Read</button>
	
    <div class="chart-container" style="position: relative; width:75vw; margin: auto;">
        <canvas id="myChart" width="800" height="450"></canvas>
    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
    <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
    <script>
        var socket = io();
        socket.on('deviceInfo', function(data) {
            console.log(data);
            // body...
            document.getElementById("manufacturer").innerHTML = data.manufacturer;
            document.getElementById("modelNumber").innerHTML = data.modelNumber;
            document.getElementById("serialNumber").innerHTML = data.serialNumber;
            document.getElementById("frimwareVersion").innerHTML = data.frimwareVersion;
            document.getElementById("deviceType").innerHTML = data.deviceType;

        });
        socket.on('LightControlLedGreen', function(data) {
            document.getElementById("onOffGreen").innerHTML = data.onOff;
            document.getElementById("colourGreen").innerHTML = data.colour;

        });
        socket.on('LightControlLedRed', function(data) {
            document.getElementById("onOffRed").innerHTML = data.onOff;
            document.getElementById("colourRed").innerHTML = data.colour;

        });
        socket.on('LightControlLedBlue', function(data) {
            document.getElementById("onOffBlue").innerHTML = data.onOff;
            document.getElementById("colourBlue").innerHTML = data.colour;

        });

        function buttonDeviceInfo() {
            socket.emit('clickedDeviceInfo');
        }

        function buttonLightControlLedGreen() {
            socket.emit('clickedLightControlLedGreen');
        }
        function buttonLightControlLedRed() {
            socket.emit('clickedLightControlLedRed');
        }
        function buttonLightControlLedBlue() {
            socket.emit('clickedLightControlLedBlue');
        }

        function buttonTemp() {
            socket.emit('clickedTemp');
        }
        var ctx = document.getElementById("myChart").getContext('2d');
        var chart = new Chart(ctx, {
            // The type of chart we want to create
            type: 'line',
            // The data for our dataset
            data: {
                labels: [],
                datasets: [{
                    label: "Temperature (Cel)",
                    borderColor: "#FF5733",
                    data: [],
                    fill: false,
                    pointStyle: 'circle',
                    backgroundColor: '#3498DB',
                    pointRadius: 5,
                    pointHoverRadius: 7,
                    lineTension: 0,
                }]
            },
            // Configuration options go here
            options: {
                scales: {
                    yAxes: [{
                        stacked: true
                    }]
                }
            }

        });
        socket.on('Temperature', function(data) {
            //console.log(data.temp);
            document.getElementById('date').innerHTML = data.date+" 	Time:"+data.time; //update the date
            if (chart.data.labels.length != 15) { //If we have less than 15 data points in the graph
                chart.data.labels.push(data.time); //Add time in x-asix
                chart.data.datasets.forEach((dataset) => {
                    dataset.data.push(data.temp); //Add temp in y-axis
                });
            } else { //If there are already 15 data points in the graph.
                chart.data.labels.shift(); //Remove first time data
                chart.data.labels.push(data.time); //Insert latest time data
                chart.data.datasets.forEach((dataset) => {
                    dataset.data.shift(); //Remove first temp data
                    dataset.data.push(data.temp); //Insert latest temp data
                });
            }
            chart.update(); //Update the graph.

        });
        // document.addEventListener('DOMContentLoaded', function () {
        	function handleLedGreenOn(){
        			socket.emit('eventLedGreenOn');
        	}
        	function handleLedGreenOff(){
        			socket.emit('eventLedGreenOff');
        	}
        	function handleLedRedOn(){
        			socket.emit('eventLedRedOn');
        	}
        	function handleLedRedOff(){
        			socket.emit('eventLedRedOff');
        	}
        	function handleLedBlueOn(){
        			socket.emit('eventLedBlueOn');
        	}
        	function handleLedBlueOff(){
        			socket.emit('eventLedBlueOff');
        	}
		        
		        // function handleLedRed(){
		        //         if (checkbox.checked) {
		        //             socket.emit('eventLedRedOn');
		        //         } else {
		        //             socket.emit('eventLedRedOff');
		        //         }
		        // }
		        // function handleLedBlue(){
		        //         if (checkbox.checked) {
		        //             socket.emit('eventLedBlueOn');
		        //         } else {
		        //             socket.emit('eventLedBlueOff');
		        //         }
		        // }
        // function handleLedRed() {

        //     // var checkbox = document.querySelector('input[type="checkbox"]');
        //     checkbox.addEventListener('change', function() {
        //         if (checkbox.checked) {
        //             socket.emit('eventLedRedOn');
        //         } else {
        //             socket.emit('eventLedRedOff');
        //         }
        //     });
        // }
        // function handleLedBlue() {

        //     // var checkbox = document.querySelector('input[type="checkbox"]');
        //     checkbox.addEventListener('change', function() {
        //         if (checkbox.checked) {
        //             socket.emit('eventBlueBlueOn');
        //         } else {
        //             socket.emit('eventLedBlueOff');
        //         }
        //     });
        // }
        // });
    </script>

</body>


</html>