'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var createUniquePlugin = function createUniquePlugin(schema) {
  var paths = schema.indexes().filter(function (index) {
    return index[1].unique;
  }).map(function (index) {
    return Object.keys(index[0]);
  });

  schema.methods.saveUnique = function (options, callback) {
    var _this = this;

    if (typeof options === 'function') {
      callback = options;
      options = undefined;
    }

    return this.save(options).then(function (doc) {
      callback && callback(null, doc);
      return doc;
    }, function (err) {
      if (err.name === 'MongoError' && err.code === 11000) {
        var _ret = function () {
          var makeOrQuery = function makeOrQuery(paths) {
            return { $or: paths.map(function (path) {
                return makeAndQuery(path);
              }) };
          };
          var makeAndQuery = function makeAndQuery(paths) {
            var andQuery = {};
            paths.forEach(function (path) {
              andQuery[path] = _this[path];
            });
            return andQuery;
          };

          var query = paths.length > 1 ? makeOrQuery(paths) : makeAndQuery(paths[0]);
          return {
            v: _this.constructor.findOne(query, callback)
          };
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
      } else {
        if (callback) {
          callback(err);
        } else {
          throw err;
        }
      }
    });
  };

  schema.statics.createUnique = function (doc) {
    var _this2 = this;

    var args = [].slice.call(arguments);
    var lastArgument = args[args.length - 1];
    var callback = typeof lastArgument === 'function' ? lastArgument : undefined;

    if (callback) {
      args.pop();
    }

    if (args.length > 1) {
      doc = args;
    }

    if (Array.isArray(doc)) {
      var _ret2 = function () {
        var promises = [Promise.resolve()];
        doc.forEach(function (d, i) {
          promises.push(promises[i].then(function () {
            return _this2.createUnique(d);
          }));
        });
        return {
          v: Promise.all(promises.slice(1)).then(function (result) {
            callback && callback(null, result);
            return result;
          }, function (err) {
            if (callback) {
              callback(err);
            } else {
              throw err;
            }
          })
        };
      }();

      if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
    }

    doc = doc instanceof this ? doc : new this(doc);
    return doc.saveUnique(callback);
  };
};

exports.default = createUniquePlugin;

module.exports = exports = createUniquePlugin;